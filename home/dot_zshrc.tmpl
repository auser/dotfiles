# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Prevent console output from breaking instant prompt
typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

# Path settings
{{- $paths := list }}
{{- $homeDir := .chezmoi.homeDir }}
{{- range $_, $relPath := list "bin" "go/bin" ".cargo/bin" ".local/bin" }}
{{    $path := joinPath $homeDir $relPath }}
{{-   if stat $path }}
{{-     $paths = mustAppend $paths $path }}
{{-   end }}
{{- end }}
{{- if $paths }}
export PATH={{ toStrings $paths | join ":" }}:$PATH
{{- end }}

# Environment settings (set these before loading plugins)
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
{{ if eq .chezmoi.os "linux" -}}
export EDITOR=$HOME/.local/bin/nvim
{{ else -}}
export EDITOR=nvim
{{ end -}}
export VISUAL=$EDITOR
export GOPATH=$HOME
export GO111MODULE=on
{{- if eq .chezmoi.os "darwin" }}
export HOMEBREW_NO_AUTO_UPDATE=1
{{- end }}
export RIPGREP_CONFIG_PATH=~/.config/ripgrep/config

# Oh-My-Zsh configuration
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME="powerlevel10k/powerlevel10k"
CASE_SENSITIVE="true"
DISABLE_AUTO_UPDATE="true"
HIST_STAMPS="yyyy-mm-dd"
ZSH_DISABLE_COMPFIX=true

# Oh-My-Zsh plugins
plugins=(git)
if [ -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]; then
  plugins+=(zsh-autosuggestions)
fi
if [ -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]; then
  plugins+=(zsh-syntax-highlighting)
fi
if [ -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting ]; then
  plugins+=(fast-syntax-highlighting)
fi

# Source Oh-My-Zsh
source $ZSH/oh-my-zsh.sh

# User configuration

# Shell options
setopt autocd
setopt histignorespace
setopt rm_star_silent

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt histignorealldups

# Aliases
alias g=git
alias gnp="git --no-pager"
{{- if lookPath "bat" }}
alias cat=bat
{{- else if lookPath "batcat" }}
alias cat=batcat
{{- end }}
{{- if lookPath "fdfind" }}
alias fd=fdfind
{{- end }}
{{- if lookPath "eza" }}
alias ls=eza
{{- else }}
alias ls='ls -G'
{{- end }}
alias ll='ls -alFh'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias grep='grep --color=auto'
alias vi='vim'
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git pull'
alias gpush='git push'
alias gl='git log --oneline --graph --decorate'
alias tn='tmux new-session -s'
alias ta='tmux attach -t'
alias tl='tmux list-sessions'
alias tk='tmux kill-session -t'

{{- if .flarm }}
# FLARM Environment
export OBSTACLE_ENV=${HOME}/src/obstacle/obstacle_toolchain
export KEY_PATH="${HOME}/Development Secrets and Keys/current"
export TOOLCHAIN_PATH=${HOME}/toolchain_bin
export IDF_TOOLS_PATH=${TOOLCHAIN_PATH}/esp32
{{- end }}

# Tool integrations
# mise activation (if installed)
if [ -f "$HOME/.local/bin/mise" ]; then
  eval "$($HOME/.local/bin/mise activate zsh)"
fi

# pnpm setup
{{- if eq .chezmoi.os "darwin" }}
export PNPM_HOME="$HOME/Library/pnpm"
{{- else }}
export PNPM_HOME="$HOME/.local/share/pnpm"
{{- end }}
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# WasmEdge
[ -f "$HOME/.wasmedge/env" ] && source "$HOME/.wasmedge/env"

# direnv integration
if command -v direnv &> /dev/null; then
  eval "$(direnv hook zsh)"
fi

# starship prompt (if installed)
if command -v starship &> /dev/null; then
  eval "$(starship init zsh)"
fi

# nvm setup (if installed)
{{ if stat (joinPath .chezmoi.homeDir ".nvm") }}
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
{{ end }}

# 1Password integration (using your specified account)
{{- if and (hasKey . "onepasswordAccount") .personal }}
if command -v op &> /dev/null; then
  # Check if we're logged in to 1Password
  if op account get > /dev/null 2>&1; then
    # Try to get GitHub token
    GITHUB_TOKEN=$(op item get "chezmoi GitHub API Token" --fields credential 2>/dev/null || echo "")
    if [ ! -z "$GITHUB_TOKEN" ]; then
      export CHEZMOI_GITHUB_ACCESS_TOKEN="$GITHUB_TOKEN"
    fi
    
    {{- if eq .chezmoi.os "darwin" }}
    # Try to get Homebrew token
    HOMEBREW_TOKEN=$(op item get "Homebrew GitHub API Token" --fields credential 2>/dev/null || echo "")
    if [ ! -z "$HOMEBREW_TOKEN" ]; then
      export HOMEBREW_GITHUB_API_TOKEN="$HOMEBREW_TOKEN"
    fi
    {{- end }}
  fi
fi
{{- end }}

# Load local configuration files
if [ -f "$HOME/.config/zsh/features/000_path.zsh" ]; then
  source $HOME/.config/zsh/features/000_path.zsh
fi
if [ -f "$HOME/.config/zsh/env.zsh" ]; then
  source $HOME/.config/zsh/env.zsh
fi
if [ -f "$HOME/.config/zsh/features/mise.zsh" ]; then
  source $HOME/.config/zsh/features/mise.zsh
fi
if [ -f "$HOME/.config/zsh/features/pnpm.zsh" ]; then
  source $HOME/.config/zsh/features/pnpm.zsh
fi
if [ -f "$HOME/.config/zsh/features/orbstack.zsh" ]; then
  source $HOME/.config/zsh/features/orbstack.zsh
fi
if [ -f "$HOME/.config/zsh/aliases.zsh" ]; then
  source $HOME/.config/zsh/aliases.zsh
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Load local customizations (at the end for maximum flexibility)
[ -f "$HOME/.zshenv" ] && source "$HOME/.zshenv"
[ -f "$HOME/.zshrc.local" ] && source "$HOME/.zshrc.local"

{{- /* vim: set filetype=zsh: */}}
